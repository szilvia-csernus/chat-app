// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique

  // The image field is required by Auth.js - synchronisation with the Photo
  // table is managed manually! Take care when manipulating / accessing image data!
  image         String?

  // the emailVerified field was required by Auth.js but isn't utilised in 
  // this app, because the user can only be created with a verified email.
  emailVerified DateTime? 
  profileComplete Boolean @default(false)

  profile Profile?

  photo Photo?

  // For Email + Password
  credentials   Credentials?

  // For OAuth support
  accounts      Account[]

  // For WebAuthn support
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  userId    String  @unique
  country  String
  gender   String
  dateOfBirth DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Photo {
  userId              String @unique
  cloudinaryImageId   String @unique
  imageUrl           String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// For Email + Password
model Credentials {
  email    String  @unique
  passwordHash  String
  userId    String  @unique  
  createdAt DateTime @default(now())
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id         String   @id @default(cuid())
  email      String   @unique
  token      String   @unique
  expires    DateTime
}

// For OAuth
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
 
// For WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

